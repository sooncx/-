<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Document</title>
</head>
<body>
    
</body>
</html>
<script>
var  testData =[
        {
          id: 111,
          organizationName: "1",
          parentId: 0,
          total: 1,
          userId: 0
        },
        {
          id: 222,
          organizationName: "1-1",
          parentId: 111,
          total: 0,
          userId: 0
        },
        {
          id: 333,
          organizationName: "1-1-1",
          parentId: 222,
          total: 0,
          userId: 0
        },
         {
          id: 444,
          organizationName: "1-1-1-1",
          parentId: 333,
          total: 0,
          userId: 0
        },
        {
          id: 555,
          organizationName: "1-1-1-1",
          parentId: 444,
          total: 0,
          userId: 0
        },
        {
          id: 666,
          organizationName: "1-1-1-1",
          parentId: 555,
          total: 0,
          userId: 0
        }
      ];

function buildTree(list){
	let temp = {};
	let tree = { id: 0, parentId: null, children: [] };
    //将temp转换为类似map数据结构{111: {…}, 222: {…}, 333: {…}, 444: {…}, 555: {…}, 666: {…}}
	for(let i in list){
		temp[list[i].id] = list[i];
	}
	for(let i in temp){
        //注意此处的i，因为temp是对象，所以i不是索引值，是id
        //parentId等于0表示没有父级
		if(temp[i].parentId) {
			// if(!temp[temp[i].parentId].children) {
			// 	temp[temp[i].parentId].children = new Array();
			// }
			// temp[temp[i].parentId].children[temp[i]] = temp[i];
            (temp[temp[i].parentId].children||(temp[temp[i].parentId].children = [])).push(temp[i])
		} else {
			tree.children.push(temp[i]);
		}
	}
    // console.log(tree);
	return tree;
}
// console.log(buildTree(testData))



function listConvertTree(list) {
  let root = null;
  if (list && list.length) {
    root = { id: 0, parentId: null, children: [] };
    const group = {};
    for (let index = 0; index < list.length; index += 1) {
      if (list[index].parentId !== null && list[index].parentId !== undefined) {
        if (!group[list[index].parentId]) {
          group[list[index].parentId] = [];
        }
        group[list[index].parentId].push(list[index]);
      }
    }
    const queue = [];
    queue.push(root);
    while (queue.length) {
      const node = queue.shift();
      node.children = group[node.id] && group[node.id].length ? group[node.id] : null;
      if (node.children) {
        queue.push(...node.children);
      }
    }
  }
//   console.log(root)
  return root;
}
// console.log(listConvertTree(testData))


function treeConvertList(root) {
  const list = [];
  if (root) {
    // const Root = JSON.parse(JSON.stringify(root));
    const Root = root;
    const queue = [];
    queue.push(Root);
    while (queue.length) {
      const node = queue.shift();
      if (node.children && node.children.length) {
        queue.push(...node.children);
      }
      delete node.children;
      if (node.parentId !== null && node.parentId !== undefined) {
        list.push(node);
      }
    }
  }
//   console.log(list)
  return list;
}
// treeConvertList(buildTree(testData));
// [...new Set(treeConvertList(buildTree(testData)))]
console.log(treeConvertList(buildTree(testData)))

function test(data) {
    var arr = [];
    arr.push(data);
    while(arr.length) {
       var node = arr.shift();
       console.log(node);
    }
}
// test(listConvertTree(testData));
</script>